#!/usr/bin/python
# -*- coding: utf-8 -*-
#  copyright 2014 Cornelius KÃ¶lbel
#  License:  AGPLv3
#  contact:  http://www.privacyidea.org
#
# This code is free software; you can redistribute it and/or
 # License as published by the Free Software Foundation; either
# version 3 of the License, or any later version.
#
# This code is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU AFFERO GENERAL PUBLIC LICENSE for more details.
#
# You should have received a copy of the GNU Affero General Public
# License along with this program.  If not, see <http://www.gnu.org/licenses/>.
'''
  Description:  This is the setup tool for privacyidea
'''

VERSION = '1.3'
DESCRIPTION = __doc__


import subprocess
import ConfigParser
import argparse
import smtplib
import binascii
from email.mime.text import MIMEText
import sys
import os
import re
import StringIO


class PrivacyIDEAConfig(object):
    
    ini_template = """[DEFAULT]
debug = false
profile = false
smtp_server = localhost
error_email_from = paste@localhost
privacyideaaudit.type = privacyidea.lib.auditmodules.sqlaudit
privacyideaaudit.key.private = %(here)s/private.pem
privacyideaaudit.key.public = %(here)s/public.pem
privacyideaaudit.sql.highwatermark = 10000
privacyideagetotp.active = False
privacyideasecretfile = %(here)s/encKey
privacyideasuperuserfile = %(here)s/admin-users
privacyideasuperuserrealms = superuser, 2ndsuperusers
privacyideasessiontimout = 1200
privacyideaurl = http://localhost:5001
privacyideaurl.disable_ssl = False
radius.dictfile = %(here)s/dictionary
radius.nas_identifier = privacyIDEA
privacyideamachine.applications = privacyidea.lib.applications.ssh, privacyidea.lib.applications.luks

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 5001

[app:main]
use = egg:privacyIDEA
sqlalchemy.url = sqlite:///%(here)s/token.sqlite
sqlalchemy.pool_recycle = 3600
full_stack = true
static_files = true
who.log_level = debug
who.log_file = %(here)s/privacyidea.log
cache_dir = %(here)s/data
custom_templates = %(here)s/custom-templates/

[loggers]
keys = root, privacyidea, sqlalchemy

[logger_root]
level = WARNING
handlers = file

[logger_privacyidea]
level = INFO
handlers = file
qualname = privacyidea

[logger_sqlalchemy]
level = ERROR
handlers = file
qualname = sqlalchemy.engine

[handlers]
keys = file

[handler_file]
class = handlers.RotatingFileHandler
args = ('%(here)s/privacyidea.log','a', 10000000, 4)
level = INFO
formatter = generic

[formatters]
keys = generic

[formatter_generic]
class = privacyidea.lib.log.SecureFormatter
format = %(asctime)s %(levelname)-5.5s {%(thread)d} [%(name)s][%(funcName)s #%(lineno)d] %(message)s
datefmt = %Y/%m/%d - %H:%M:%S
"""
    
    
    
    def __init__(self,
                 file="/etc/privacyidea/privacyidea.ini",
                 init=False):
        self.file = file
        self.config = ConfigParser.RawConfigParser()
        if init:
            self.config.readfp(StringIO.StringIO(self.ini_template))
        else:
            self.config.read(self.file)
    
    def get_getotp(self):
        getotp = self.config.get("DEFAULT", "privacyideaGetotp.active")
        return getotp.upper() == "TRUE"
    
    def get_keyfile(self):
        return self.config.get("DEFAULT", "privacyideaSecretFile")

    def get_adminfile(self):
        return self.config.get("DEFAULT", "privacyideaSuperuserFile")

    def set_adminfile(self, afile):
        self.config.set("DEFAULT", "privacyideaSuperuserFile", afile)
    
    def get_adminrealms(self):
        return self.config.get("DEFAULT", "privacyideaSuperuserRealms")

    def set_adminrealms(self, arealms):
        self.config.set("DEFAULT", "privacyideaSuperuserRealms", arealms)

    def get_DB(self):
        return self.config.get("app:main", "sqlalchemy.url")
   
    def set_DB(self, db_config):
        """
        :param db_config: sets the database parameters (type, host, user,
                          password, database)
        :type db_config: dictionary
        """
        db_str = self.config.get("app:main", "sqlalchemy.url")
        if not db_str:
            db_str = "mysql://privacyidea:privacyidea@localhost/privacyidea"
        print db_config
        # compile hostname
        pattern = "^(.*)://(.*)/(.*)$"
        m = re.match(pattern, db_str)
        if m:
            hostpart = m.group(2)
            dbtype = m.group(1)
            dbname = m.group(3)
            password = None
            user = None
            hostparts = hostpart.split('@')
            if len(hostparts) == 2:
                user, password = hostparts[0].split(':')
                host = hostparts[1] 
            elif len(hostparts) == 1:
                host = hostparts[0]

            if db_config.get("type"):
                dbtype = db_config.get("type")
            if db_config.get("database"):
                 dbname = db_config.get("database")
            if db_config.get("password"):
                password = db_config.get("password")
            if db_config.get("user"):
                user = db_config.get("user")
            if db_config.get("host"):
                host = db_config.get("host")
            
            if password:
                hostpart = "%s:%s@%s" % (user, password, host)
            elif user:
                hostpart = "%s@%s" % (user, host)
            else:
                hostpart = host
            db_str = "%s://%s/%s" % (dbtype, hostpart, dbname)
            
            self.config.set("app:main", "sqlalchemy.url", db_str )
     
    def get_loglevel(self):
        return self.config.get("handler_file", "level") 
    
    def set_loglevel(self, level):
        self.config.set("handler_file", "level", level)
        
    def toggle_getotp(self):
        getotp = self.get_getotp()
        self.config.set("DEFAULT", "privacyideaGetotp.active", not getotp)
        
    def save(self):
        with open(self.file, 'wb') as configfile:
            self.config.write(configfile)
        print "Config file %s saved." % self.file


def privacyidea_view(args):
    pConfig = PrivacyIDEAConfig(args.file)
    print """
    Retrieving OTP values is allowed: %s
    The secret key file             : %s
    The administrator file          : %s
    List of the admin realms        : %s
    Database configuration          : %s
    Loglevel                        : %s
    """ % (pConfig.get_getotp(),
           pConfig.get_keyfile(),
           pConfig.get_adminfile(),
           pConfig.get_adminrealms(),
           pConfig.get_DB(),
           pConfig.get_loglevel())
    
def privacyidea_init(args):
    pConfig = PrivacyIDEAConfig(args.file,
                                init=True)
    pConfig.save()
    privacyidea_view(args)
    
def privacyidea_set(args):
    pConfig = PrivacyIDEAConfig(args.file)  
    if args.loglevel:
        pConfig.set_loglevel(args.loglevel)
    if args.dbuser:
        pConfig.set_DB({"user": args.dbuser})
    if args.dbpassword:
        pConfig.set_DB({"password": args.dbpassword})
    if args.dbtype:
        pConfig.set_DB({"type": args.dbtype})
    if args.dbhost:
        pConfig.set_DB({"host": args.dbhost})
    if args.dbname:
        pConfig.set_DB({"database": args.dbname})
    if args.adminrealms:
        pConfig.set_adminrealms(args.adminrealms)
    if args.adminfile:
        pConfig.set_adminfile(args.adminfile)
    if args.getotp:
        pConfig.toggle_getotp()
    pConfig.save()
    privacyidea_view(args)


def create_arguments():
    parser = argparse.ArgumentParser(description=DESCRIPTION,
                                     fromfile_prefix_chars='@')
    parser.add_argument("-f", "--file",
                        help="The privacyidea.ini file.",
                        required=False)
    parser.add_argument("-v", "--version",
                        help="Print the version of the program.",
                        action='version', version='%(prog)s ' + VERSION)
    
    subparsers = parser.add_subparsers(help="The available commands. Running "
                                       "<command> -h will give you a detailed "
                                       "help on this command.",
                                       title="COMMANDS",
                                       description="The command line tool "
                                       "requires one command, to know what "
                                       "action it should take")
    
    ################################################################
    #
    # privacyidea.ini commands
    #
    privacyidea_parser = subparsers.add_parser("privacyidea",
                                               help="configure privacyidea "
                                               "application in privacyidea.ini."
                                               )
    token_sub = privacyidea_parser.add_subparsers()
    
    # privacyidea
    p_pidea = token_sub.add_parser('view',
                                   help='View the privacyidea config.')
    p_pidea.set_defaults(func=privacyidea_view)
    
    p_pidea = token_sub.add_parser('init',
                                   help="initiate a ini-file template")
    p_pidea.set_defaults(func=privacyidea_init)
    
    p_pidea = token_sub.add_parser('set',
                                   help='set some things.')
    p_pidea.set_defaults(func=privacyidea_set)
    p_pidea.add_argument("-l", "--loglevel",
                         help="Set the log level to DEBUG, INFO, WARN "
                         "or ERROR.")
    p_pidea.add_argument("--dbuser",
                         help="The database user")
    p_pidea.add_argument("--dbpassword",
                         help="The database password")
    p_pidea.add_argument("--dbhost",
                         help="The hostname of the database connection")
    p_pidea.add_argument("--dbtype",
                         help="The type like 'mysql'")
    p_pidea.add_argument("--dbname",
                         help="The database name")
    
    p_pidea.add_argument("--adminrealms",
                         help="comma seperated list of admin realms")
    p_pidea.add_argument("--adminfile",
                         help="file with admin users")
    p_pidea.add_argument("--getotp",
                         action="store_true",
                         help="Toggle if retrieving OTP values is allowed "
                         "or not.")
    args = parser.parse_args()
    return args

    
def main():
    args = create_arguments()
    args.func(args)


if __name__ == '__main__':
    main()